/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.connect;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author phu
 */
public class Ve extends javax.swing.JFrame {

    /**
     * Creates new form Ve
     */
    public Ve() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
private void ShowDuLieu() {
    try {
        // Xóa dữ liệu cũ khỏi bảng
        tableMain.setModel(new DefaultTableModel());

        // Định nghĩa các cột cho bảng hiển thị
        String[] columnNames = {"Mã Vé", "Mã Lịch Chiếu", "Mã KH", "Giá Vé", "Ngày Mua", "Trạng Thái"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        // Thiết lập kết nối đến cơ sở dữ liệu
        Connection connection = Connect.getConnection();
        if (connection == null) {
            JOptionPane.showMessageDialog(this, "Kết nối cơ sở dữ liệu thất bại!");
            return;
        }

        // Câu truy vấn SQL để lấy dữ liệu từ bảng Ve
        String query = "SELECT * FROM Ve";
        PreparedStatement ps = connection.prepareStatement(query);
        ResultSet rs = ps.executeQuery();

        // Duyệt qua từng dòng kết quả và thêm vào model
        while (rs.next()) {
            Vector<Object> vector = new Vector<>();
            vector.add(rs.getInt("MaVe"));
            vector.add(rs.getInt("MaLichChieu"));
            vector.add(rs.getInt("MaKH"));
            vector.add(rs.getBigDecimal("GiaVe"));
            vector.add(rs.getDate("NgayMua"));

            // Lấy trạng thái từ cơ sở dữ liệu
            String trangThai = rs.getString("TrangThai");
            vector.add(trangThai); // Thêm trạng thái vé vào vector

            model.addRow(vector); // Thêm dòng vào model
        }

        // Đóng kết nối
        rs.close();
        ps.close();
        Connect.closeConnection(connection);

        // Cập nhật model cho tableMain
        tableMain.setModel(model);

        // Thiết lập JComboBox cho cột "Trạng Thái"
        TableColumn trangThaiColumn = tableMain.getColumnModel().getColumn(5); // Cột thứ 6 (index 5)
        JComboBox<String> trangThaiComboBox = new JComboBox<>();
        trangThaiComboBox.addItem("Đã thanh toán");
        trangThaiComboBox.addItem("Chưa thanh toán");
        trangThaiComboBox.addItem("Đã hủy");

        trangThaiColumn.setCellEditor(new DefaultCellEditor(trangThaiComboBox));

    } catch (SQLException ex) {
        Logger.getLogger(PhongChieu.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableMain = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMaVe = new javax.swing.JTextField();
        txtMaLichChieu = new javax.swing.JTextField();
        txtMaKH = new javax.swing.JTextField();
        txtGiaVe = new javax.swing.JTextField();
        txtNgayMua = new javax.swing.JTextField();
        cboTrangThai = new javax.swing.JComboBox<>();
        btlThem = new javax.swing.JButton();
        btlSua = new javax.swing.JButton();
        btlXoa = new javax.swing.JButton();
        btlThoat = new javax.swing.JButton();
        btlTimKiem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tableMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã vé", "Mã lịch chiếu", "Mã khách hàng", "Giá vé", "Ngày mua", "Trạng thái"
            }
        ));
        tableMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMain);

        jLabel1.setText("Mã vé");

        jLabel2.setText("Mã lịch chiếu");

        jLabel3.setText("Mã khách hàng");

        jLabel4.setText("Giá vé");

        jLabel5.setText("Ngày mua");

        jLabel6.setText("Trạng thái");

        cboTrangThai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đã thanh toán", "Chưa thanh toán", "Đã hủy", " " }));
        cboTrangThai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTrangThaiActionPerformed(evt);
            }
        });

        btlThem.setText("Thêm");
        btlThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlThemActionPerformed(evt);
            }
        });

        btlSua.setText("Sửa");
        btlSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlSuaActionPerformed(evt);
            }
        });

        btlXoa.setText("Xóa");
        btlXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlXoaActionPerformed(evt);
            }
        });

        btlThoat.setText("Thoát");
        btlThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlThoatActionPerformed(evt);
            }
        });

        btlTimKiem.setText("Tìm kiếm");
        btlTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlTimKiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(btlThem)
                        .addGap(18, 18, 18)
                        .addComponent(btlSua)
                        .addGap(18, 18, 18)
                        .addComponent(btlXoa)
                        .addGap(18, 18, 18)
                        .addComponent(btlTimKiem)
                        .addGap(18, 18, 18)
                        .addComponent(btlThoat))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMaVe)
                            .addComponent(txtMaLichChieu)
                            .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtGiaVe, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtNgayMua, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtMaVe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMaLichChieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtGiaVe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtNgayMua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btlThem)
                    .addComponent(btlSua)
                    .addComponent(btlXoa)
                    .addComponent(btlThoat)
                    .addComponent(btlTimKiem))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboTrangThaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTrangThaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboTrangThaiActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        ShowDuLieu();
    }//GEN-LAST:event_formComponentShown

    private void btlThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlThemActionPerformed
        // TODO add your handling code here:
   // Kiểm tra dữ liệu đầu vào
    if (txtMaVe.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Mã Vé không được để trống");
        txtMaVe.requestFocus();
        return;
    } else if (txtMaLichChieu.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Mã Lịch Chiếu không được để trống");
        txtMaLichChieu.requestFocus();
        return;
    } else if (txtMaKH.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Mã Khách Hàng không được để trống");
        txtMaKH.requestFocus();
        return;
    } else if (txtNgayMua.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ngày Mua không được để trống");
        txtNgayMua.requestFocus();
        return;
    } else if (txtGiaVe.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Giá Vé không được để trống");
        txtGiaVe.requestFocus();
        return;
    }

    try {
        // Chuyển đổi dữ liệu từ chuỗi sang số nếu cần
        int maVe = Integer.parseInt(txtMaVe.getText());
        int maLichChieu = Integer.parseInt(txtMaLichChieu.getText());
        int maKH = Integer.parseInt(txtMaKH.getText());
        BigDecimal giaVe = new BigDecimal(txtGiaVe.getText());

        // Chuyển đổi ngày mua sang kiểu DATE
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);
        Date ngayMua = dateFormat.parse(txtNgayMua.getText());

        // Kiểm tra xem Mã Lịch Chiếu có tồn tại trong bảng LichChieu không
        try (Connection connection = Connect.getConnection()) {
            String checkLichChieuQuery = "SELECT COUNT(*) FROM LichChieu WHERE MaLichChieu = ?";
            PreparedStatement checkLichChieuPs = connection.prepareStatement(checkLichChieuQuery);
            checkLichChieuPs.setInt(1, maLichChieu);
            ResultSet checkLichChieuRs = checkLichChieuPs.executeQuery();
            checkLichChieuRs.next();
            int lichChieuCount = checkLichChieuRs.getInt(1);

            if (lichChieuCount == 0) {
                JOptionPane.showMessageDialog(this, "Mã Lịch Chiếu không tồn tại.");
                return;
            }

            // Kiểm tra xem Mã Khách Hàng có tồn tại trong bảng KhachHang không
            String checkKHQuery = "SELECT COUNT(*) FROM KhachHang WHERE MaKH = ?";
            PreparedStatement checkKHPs = connection.prepareStatement(checkKHQuery);
            checkKHPs.setInt(1, maKH);
            ResultSet checkKHRs = checkKHPs.executeQuery();
            checkKHRs.next();
            int khCount = checkKHRs.getInt(1);

            if (khCount == 0) {
                JOptionPane.showMessageDialog(this, "Mã Khách Hàng không tồn tại.");
                return;
            }

            // Chèn bản ghi mới vào bảng Ve
            String insertQuery = "INSERT INTO Ve (MaVe, MaLichChieu, MaKH, GiaVe, NgayMua, TrangThai) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement insertPs = connection.prepareStatement(insertQuery);
            insertPs.setInt(1, maVe);
            insertPs.setInt(2, maLichChieu);
            insertPs.setInt(3, maKH);
            insertPs.setBigDecimal(4, giaVe);
            insertPs.setDate(5, new java.sql.Date(ngayMua.getTime())); // Định dạng DATE
            insertPs.setString(6, (String) cboTrangThai.getSelectedItem()); // Lấy trạng thái từ JComboBox

            int rowsAffected = insertPs.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Thêm vé thành công!");
                ShowDuLieu(); // Cập nhật lại bảng sau khi thêm

                // Xóa dữ liệu đã nhập sau khi thêm thành công
                txtMaVe.setText("");
                txtMaLichChieu.setText("");
                txtMaKH.setText("");
                txtGiaVe.setText("");
                txtNgayMua.setText("");
                cboTrangThai.setSelectedIndex(0); // Reset combo box về trạng thái mặc định
            } else {
                JOptionPane.showMessageDialog(this, "Không thể thêm vé. Vui lòng thử lại.");
            }

        } catch (SQLException ex) {
            Logger.getLogger(Ve.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Thêm vé thất bại! Lỗi: " + ex.getMessage());
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi: Mã Vé, Mã Lịch Chiếu, và Mã Khách Hàng phải là số hợp lệ.");
    } catch (ParseException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi: Ngày Mua phải có định dạng yyyy-MM-dd.");
    }
    }//GEN-LAST:event_btlThemActionPerformed

    private void btlSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlSuaActionPerformed
        // TODO add your handling code here:
       // Kiểm tra dữ liệu đầu vào
    if (txtMaVe.getText().isEmpty() || txtMaLichChieu.getText().isEmpty() || txtMaKH.getText().isEmpty() || txtGiaVe.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin.");
        return;
    }

    try {
        // Lấy dữ liệu từ các trường nhập liệu
        int maVe = Integer.parseInt(txtMaVe.getText());
        int maLichChieu = Integer.parseInt(txtMaLichChieu.getText());
        int maKH = Integer.parseInt(txtMaKH.getText());
        BigDecimal giaVe = new BigDecimal(txtGiaVe.getText());
        String trangThai = (String) cboTrangThai.getSelectedItem();

        // Kiểm tra xem mã vé có tồn tại trong bảng hay không
        try (Connection connection = Connect.getConnection()) {
            String checkQuery = "SELECT COUNT(*) FROM Ve WHERE MaVe = ?";
            PreparedStatement checkPs = connection.prepareStatement(checkQuery);
            checkPs.setInt(1, maVe);
            ResultSet rs = checkPs.executeQuery();
            rs.next();
            int count = rs.getInt(1);

            if (count == 0) {
                JOptionPane.showMessageDialog(this, "Mã vé không tồn tại.");
                return;
            }

            // Cập nhật thông tin vé trong cơ sở dữ liệu
            String updateQuery = "UPDATE Ve SET MaLichChieu = ?, MaKH = ?, GiaVe = ?, TrangThai = ? WHERE MaVe = ?";
            PreparedStatement updatePs = connection.prepareStatement(updateQuery);
            updatePs.setInt(1, maLichChieu);
            updatePs.setInt(2, maKH);
            updatePs.setBigDecimal(3, giaVe);
            updatePs.setString(4, trangThai);
            updatePs.setInt(5, maVe);

            int rowsAffected = updatePs.executeUpdate();
            Connect.closeConnection(connection);

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Sửa vé thành công!");
                ShowDuLieu(); // Cập nhật lại bảng sau khi sửa
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy vé có mã " + maVe);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ve.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Sửa vé thất bại! Lỗi: " + ex.getMessage());
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi: Các trường Mã Vé, Mã Lịch Chiếu, Mã Khách Hàng phải là số và Giá Vé phải hợp lệ.");
    }
    }//GEN-LAST:event_btlSuaActionPerformed

    private void btlXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlXoaActionPerformed
        // TODO add your handling code here:
    // Kiểm tra dữ liệu đầu vào
    if (txtMaVe.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Vui lòng nhập Mã Vé cần xóa.");
        return;
    }

    try {
        // Lấy mã vé từ trường nhập liệu
        int maVe = Integer.parseInt(txtMaVe.getText());

        // Xác nhận trước khi xóa
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa vé này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        // Xóa vé khỏi cơ sở dữ liệu
        try (Connection connection = Connect.getConnection()) {
            String deleteQuery = "DELETE FROM Ve WHERE MaVe = ?";
            PreparedStatement deletePs = connection.prepareStatement(deleteQuery);
            deletePs.setInt(1, maVe);

            int rowsAffected = deletePs.executeUpdate();
            Connect.closeConnection(connection);

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Xóa vé thành công!");
                ShowDuLieu(); // Cập nhật lại bảng sau khi xóa
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy vé có mã " + maVe);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ve.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Xóa vé thất bại! Lỗi: " + ex.getMessage());
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi: Mã Vé phải là số.");
    }
    }//GEN-LAST:event_btlXoaActionPerformed

    private void tableMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMainMouseClicked
        // TODO add your handling code here:
           // Lấy chỉ số hàng được chọn
    int row = tableMain.getSelectedRow();

    // Kiểm tra xem hàng có được chọn không
    if (row >= 0) {
        // Lấy giá trị từ bảng và hiển thị lên các JTextField tương ứng
        txtMaVe.setText(tableMain.getValueAt(row, 0).toString());         // Cột 0: Mã Vé
        txtMaLichChieu.setText(tableMain.getValueAt(row, 1).toString());  // Cột 1: Mã Lịch Chiếu
        txtMaKH.setText(tableMain.getValueAt(row, 2).toString());         // Cột 2: Mã KH
        txtGiaVe.setText(tableMain.getValueAt(row, 3).toString());        // Cột 3: Giá Vé
        txtNgayMua.setText(tableMain.getValueAt(row, 4).toString());      // Cột 4: Ngày Mua
        cboTrangThai.setSelectedItem(tableMain.getValueAt(row, 5).toString()); // Cột 5: Trạng Thái
    }
    }//GEN-LAST:event_tableMainMouseClicked

    private void btlThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlThoatActionPerformed

                this.dispose();
                // Mở form chính (giả sử bạn có một lớp MainForm)
                Main mainForm = new Main();
                mainForm.setVisible(true); 
    }//GEN-LAST:event_btlThoatActionPerformed

    private void btlTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlTimKiemActionPerformed
          // Lấy giá trị từ các trường văn bản
    String maVe = txtMaVe.getText().trim();
    String maLichChieu = txtMaLichChieu.getText().trim();
    String maKH = txtMaKH.getText().trim();
    String giaVe = txtGiaVe.getText().trim();
    String ngayMua = txtNgayMua.getText().trim();
    String trangThai = cboTrangThai.getSelectedItem().toString().trim();
    
    // Tạo kết nối tới cơ sở dữ liệu
    try (Connection connection = Connect.getConnection()) { // Sử dụng phương thức kết nối của bạn
        // Tạo câu lệnh SQL
        String sql = "SELECT * FROM Ve WHERE "
                   + "MaVe LIKE ? AND "
                   + "MaLichChieu LIKE ? AND "
                   + "MaKH LIKE ? AND "
                   + "GiaVe LIKE ? AND "
                   + "NgayMua LIKE ? AND "
                   + "TrangThai LIKE ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            // Cài đặt tham số cho câu lệnh
            stmt.setString(1, maVe.isEmpty() ? "%" : maVe);
            stmt.setString(2, maLichChieu.isEmpty() ? "%" : maLichChieu);
            stmt.setString(3, maKH.isEmpty() ? "%" : maKH);
            stmt.setString(4, giaVe.isEmpty() ? "%" : giaVe);
            stmt.setString(5, ngayMua.isEmpty() ? "%" : ngayMua);
            stmt.setString(6, trangThai.isEmpty() ? "%" : trangThai);
            
            // Thực thi câu lệnh và nhận kết quả
            try (ResultSet rs = stmt.executeQuery()) {
                // Tạo mô hình dữ liệu cho bảng
                DefaultTableModel model = new DefaultTableModel(new String[]{"MaVe", "MaLichChieu", "MaKH", "GiaVe", "NgayMua", "TrangThai"}, 0);
                
                // Đọc dữ liệu từ ResultSet và thêm vào mô hình
                while (rs.next()) {
                    String mv = rs.getString("MaVe");
                    String mlc = rs.getString("MaLichChieu");
                    String mkh = rs.getString("MaKH");
                    String gv = rs.getString("GiaVe");
                    String nm = rs.getString("NgayMua");
                    String tt = rs.getString("TrangThai");
                    model.addRow(new Object[]{mv, mlc, mkh, gv, nm, tt});
                }
                
                // Cập nhật bảng với dữ liệu mới
                tableMain.setModel(model);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace(); // Xử lý lỗi
        JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btlTimKiemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ve().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btlSua;
    private javax.swing.JButton btlThem;
    private javax.swing.JButton btlThoat;
    private javax.swing.JButton btlTimKiem;
    private javax.swing.JButton btlXoa;
    private javax.swing.JComboBox<String> cboTrangThai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMain;
    private javax.swing.JTextField txtGiaVe;
    private javax.swing.JTextField txtMaKH;
    private javax.swing.JTextField txtMaLichChieu;
    private javax.swing.JTextField txtMaVe;
    private javax.swing.JTextField txtNgayMua;
    // End of variables declaration//GEN-END:variables
}
