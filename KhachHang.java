/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.connect;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author phu
 */
public class KhachHang extends javax.swing.JFrame {

    /**
     * Creates new form KhachHang
     */
    public KhachHang() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableMain = new javax.swing.JTable();
        btlSua = new javax.swing.JButton();
        btlXoa = new javax.swing.JButton();
        btlThem = new javax.swing.JButton();
        btlTimkiem = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMaKH = new javax.swing.JTextField();
        txtTenKH = new javax.swing.JTextField();
        txtNgaySinh = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtSDT = new javax.swing.JTextField();
        btlThoat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tableMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã KH", "Tên KH", "Năm sinh", "Email", "Số điện  thoại"
            }
        ));
        tableMain.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableMainFocusGained(evt);
            }
        });
        tableMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMain);

        btlSua.setText("Sửa");
        btlSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlSuaActionPerformed(evt);
            }
        });

        btlXoa.setText("Xóa");
        btlXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlXoaActionPerformed(evt);
            }
        });

        btlThem.setText("Thêm");
        btlThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlThemActionPerformed(evt);
            }
        });

        btlTimkiem.setText("Tìm kiếm");
        btlTimkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlTimkiemActionPerformed(evt);
            }
        });

        jLabel1.setText("Mã KH");

        jLabel2.setText("Tên KH");

        jLabel3.setText("Email");

        jLabel4.setText("Năm sinh");

        jLabel5.setText("Số điện thoại");

        btlThoat.setText("Thoát");
        btlThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlThoatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(btlThem)
                .addGap(29, 29, 29)
                .addComponent(btlSua)
                .addGap(27, 27, 27)
                .addComponent(btlXoa)
                .addGap(29, 29, 29)
                .addComponent(btlTimkiem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btlThoat))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btlTimkiem)
                    .addComponent(btlSua)
                    .addComponent(btlThem)
                    .addComponent(btlXoa)
                    .addComponent(btlThoat))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

       private void ShowDuLieu(){
    try{
            tableMain.removeAll();
            String[] arr = {" Mã KH","Tên KH", "Số Điện Thoại","Email","Ngày Sinh"};
            DefaultTableModel model = new DefaultTableModel(arr, 0);
            
             Connection connection = Connect.getConnection();
             if (connection == null) {
    JOptionPane.showMessageDialog(this, "Kết nối cơ sở dữ liệu thất bại!");
    return;
}
            String query = " Select * from KhachHang";
            PreparedStatement ps = connection.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                Vector vector = new Vector();
                vector.add(rs.getString("MaKH"));
                vector.add(rs.getString("TenKH"));
                vector.add(rs.getString("SoDienThoai"));
                vector.add(rs.getString("Email"));
                vector.add(rs.getString("NgaySinh"));                
                model.addRow(vector);
            }
            Connect.closeConnection(connection);
           tableMain.setModel(model);
    }catch(SQLException ex){
        Logger.getLogger(PhongChieu.class.getName()).log(Level.SEVERE, null, ex);
    }
   }
    private void btlSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlSuaActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableMain.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn một khách hàng chiếu để sửa.");
            return;
        }
        // Lấy mã phòng từ hàng được chọn (giả sử cột đầu tiên là MaPhong)
        String maKH = tableMain.getModel().getValueAt(selectedRow, 0).toString();

        // Lấy dữ liệu mới từ các JTextField
     String tenKHMoi = txtTenKH.getText();
    String ngaySinhMoi = txtNgaySinh.getText(); // Lấy ngày sinh mới
    String emailMoi = txtEmail.getText(); // Lấy email mới
    int soDienThoai;
    try {
        soDienThoai = Integer.parseInt(txtSDT.getText());
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi: Số điện thoại phải là số nguyên.");
        return;
    }

    try (Connection connection = Connect.getConnection()) {
        // Sửa lại câu truy vấn SQL để cập nhật đúng bảng và cột
        String query = "UPDATE dbo.KhachHang SET TenKH = ?, SoDienThoai = ?, NgaySinh = ?, Email = ? WHERE MaKH = ?"; 
        PreparedStatement ps = connection.prepareStatement(query);
        ps.setString(1, tenKHMoi);
        ps.setInt(2, soDienThoai);
        ps.setString(3, ngaySinhMoi); // Cập nhật ngày sinh
        ps.setString(4, emailMoi); // Cập nhật email
        ps.setString(5, maKH); 
        ps.executeUpdate();
        Connect.closeConnection(connection);

        // Cập nhật dữ liệu trên JTable (Đảm bảo cập nhật đúng cột)
        tableMain.setValueAt(tenKHMoi, selectedRow, 1); 
        tableMain.setValueAt(soDienThoai, selectedRow, 2); 
        tableMain.setValueAt(ngaySinhMoi, selectedRow, 4); // Cập nhật cột ngày sinh
        tableMain.setValueAt(emailMoi, selectedRow, 3); // Cập nhật cột email

        JOptionPane.showMessageDialog(this, "Sửa thành công!");

    } catch (SQLException ex) {
        Logger.getLogger(PhongChieu.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Sửa thất bại!");
    }

        // Xóa dữ liệu đã nhập trong JTextField
        txtMaKH.setText("");
        txtTenKH.setText("");
        txtNgaySinh.setText("");
        txtEmail.setText("");
        txtSDT.setText("");
    }//GEN-LAST:event_btlSuaActionPerformed

    private void btlXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlXoaActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa?");
        if (result == JOptionPane.YES_OPTION) { // Kiểm tra xem người dùng có chọn "Yes" không

            int position = tableMain.getSelectedRow();
     if (position >= 0) { 
        String data = tableMain.getModel().getValueAt(position, 0).toString();
        try (Connection connection = Connect.getConnection()) {
            // Sửa lại câu truy vấn SQL để xóa đúng bảng
            String query = "DELETE FROM dbo.KhachHang WHERE MaKH = ?"; 
            PreparedStatement ps = connection.prepareStatement(query);
            ps.setString(1, data); 
            ps.executeUpdate();
            ShowDuLieu(); 
            Connect.closeConnection(connection);
            JOptionPane.showMessageDialog(null, "Xóa thành công!");
        } catch (SQLException ex) {ex.printStackTrace(); 

            JOptionPane.showMessageDialog(null, "Lỗi khi xóa: " + ex.getMessage()); 
        }
    } else {
        JOptionPane.showMessageDialog(null, "Vui lòng chọn một hàng để xóa.");
    }
        }
    }//GEN-LAST:event_btlXoaActionPerformed

    private void btlThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlThemActionPerformed

 // Kiểm tra dữ liệu đầu vào
    if (txtMaKH.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Mã KH không được để trống");
        txtMaKH.requestFocus();
        return;
    } else if (txtTenKH.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Tên KH không được để trống");
        txtTenKH.requestFocus();
        return;
    } else if (txtSDT.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Số điện thoại không được để trống");
        txtSDT.requestFocus();
        return;
    } 

    // Kiểm tra định dạng số điện thoại (chỉ chấp nhận số)
    try {
        Integer.parseInt(txtSDT.getText());
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi: Số điện thoại phải là số.");
        txtSDT.requestFocus();
        return;
    }

    // Thêm khách hàng mới vào cơ sở dữ liệu
    try (Connection connection = Connect.getConnection()) {
        // Kiểm tra xem Mã KH đã tồn tại hay chưa
        String checkQuery = "SELECT COUNT(*) FROM dbo.KhachHang WHERE MaKH = ?";
        PreparedStatement checkPs = connection.prepareStatement(checkQuery);
        checkPs.setString(1, txtMaKH.getText());
        ResultSet checkRs = checkPs.executeQuery();
        checkRs.next();
        int count = checkRs.getInt(1);

        if (count > 0) {
            JOptionPane.showMessageDialog(this, "Mã KH đã tồn tại!");
            txtMaKH.requestFocus();
            return;
        }

        String insertQuery = "INSERT INTO dbo.[KhachHang] (MaKH, TenKH, SoDienThoai, Email, NgaySinh) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement insertPs = connection.prepareStatement(insertQuery);
        insertPs.setString(1, txtMaKH.getText());
        insertPs.setString(2, txtTenKH.getText());
        insertPs.setString(3, txtSDT.getText()); // Lưu số điện thoại dưới dạng chuỗi
        insertPs.setString(4, txtEmail.getText());
        insertPs.setString(5, txtNgaySinh.getText()); 

        insertPs.executeUpdate();
        Connect.closeConnection(connection);
        JOptionPane.showMessageDialog(this, "Thêm thành công!");
        ShowDuLieu(); // Cập nhật lại bảng sau khi thêm

        // Xóa dữ liệu đã nhập trong JTextField sau khi thêm thành công
        txtMaKH.setText("");
        txtTenKH.setText("");
        txtSDT.setText("");
        txtEmail.setText("");
        txtNgaySinh.setText("");

    } catch (SQLException ex) {
        Logger.getLogger(KhachHang.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Thêm thất bại! Lỗi: " + ex.getMessage()); 
    }
    }//GEN-LAST:event_btlThemActionPerformed

    private void tableMainFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableMainFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMainFocusGained

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        ShowDuLieu();
    }//GEN-LAST:event_formComponentShown

    private void btlThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlThoatActionPerformed
        // TODO add your handling code here:
                        this.dispose();
                // Mở form chính (giả sử bạn có một lớp MainForm)
                Main mainForm = new Main();
                mainForm.setVisible(true);
    }//GEN-LAST:event_btlThoatActionPerformed

    private void tableMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMainMouseClicked
        // TODO add your handling code here:
            int selectedRow = tableMain.getSelectedRow(); // Lấy chỉ số dòng được chọn

    if (selectedRow >= 0) { // Kiểm tra xem có dòng nào được chọn không
        // Lấy model của bảng
        DefaultTableModel model = (DefaultTableModel) tableMain.getModel();

        // Lấy dữ liệu từ các cột tương ứng và hiển thị lên các trường nhập liệu
        txtMaKH.setText(model.getValueAt(selectedRow, 0).toString()); 
        txtTenKH.setText(model.getValueAt(selectedRow, 1).toString());
        txtSDT.setText(model.getValueAt(selectedRow, 2).toString());
        txtEmail.setText(model.getValueAt(selectedRow, 3).toString());
        txtNgaySinh.setText(model.getValueAt(selectedRow, 4).toString()); 

        // Nếu có các trường nhập liệu khác, bạn có thể thêm tương tự ở đây
    }
    }//GEN-LAST:event_tableMainMouseClicked

    private void btlTimkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlTimkiemActionPerformed
  // Lấy giá trị từ các trường văn bản
    String maKH = txtMaKH.getText().trim();
    String tenKH = txtTenKH.getText().trim();
    String email = txtEmail.getText().trim();
    String sdt = txtSDT.getText().trim();
    String ngaySinh = txtNgaySinh.getText().trim();
    
    // Tạo kết nối tới cơ sở dữ liệu
    try (Connection connection = Connect.getConnection()) {
        // Tạo câu lệnh SQL
        String sql = "SELECT * FROM KhachHang WHERE "
                   + "MaKH LIKE ? AND "
                   + "TenKH LIKE ? AND "
                   + "Email LIKE ? AND "
                   + "SoDienThoai LIKE ? AND "
                   + "NgaySinh LIKE ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            // Cài đặt tham số cho câu lệnh
            stmt.setString(1, maKH.isEmpty() ? "%" : maKH);
            stmt.setString(2, tenKH.isEmpty() ? "%" : tenKH);
            stmt.setString(3, email.isEmpty() ? "%" : email);
            stmt.setString(4, sdt.isEmpty() ? "%" : sdt);
            stmt.setString(5, ngaySinh.isEmpty() ? "%" : ngaySinh);
            
            // Thực thi câu lệnh và nhận kết quả
            try (ResultSet rs = stmt.executeQuery()) {
                // Tạo mô hình dữ liệu cho bảng
                DefaultTableModel model = new DefaultTableModel(new String[]{"MaKH", "TenKH", "Email", "SoDienThoai", "NgaySinh"}, 0);
                
                // Đọc dữ liệu từ ResultSet và thêm vào mô hình
                while (rs.next()) {
                    String mkh = rs.getString("MaKH");
                    String tkh = rs.getString("TenKH");
                    String em = rs.getString("Email");
                    String sd = rs.getString("SoDienThoai");
                    String ns = rs.getString("NgaySinh");
                    model.addRow(new Object[]{mkh, tkh, em, sd, ns});
                }
                
                // Cập nhật bảng với dữ liệu mới
                tableMain.setModel(model);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace(); // Xử lý lỗi
        JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btlTimkiemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KhachHang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btlSua;
    private javax.swing.JButton btlThem;
    private javax.swing.JButton btlThoat;
    private javax.swing.JButton btlTimkiem;
    private javax.swing.JButton btlXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMain;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMaKH;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTenKH;
    // End of variables declaration//GEN-END:variables
}
