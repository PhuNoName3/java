/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.connect;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author phu
 */
public class LichChieu extends javax.swing.JFrame {

    /**
     * Creates new form LichChieu
     */
    public LichChieu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableMain = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMaLichChieu = new javax.swing.JTextField();
        txtMaPhim = new javax.swing.JTextField();
        txtMaPhong = new javax.swing.JTextField();
        txtNgayChieu = new javax.swing.JTextField();
        txtGioChieu = new javax.swing.JTextField();
        btlThem = new javax.swing.JButton();
        btlSua = new javax.swing.JButton();
        btlXoa = new javax.swing.JButton();
        btlThoat = new javax.swing.JButton();
        btlTimKiem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tableMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã lịch chiếu", "Mã phim", "Mã phòng", "Ngày chiếu", "Giờ chiếu"
            }
        ));
        tableMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMain);

        jLabel1.setText("Mã lịch chiếu");

        jLabel2.setText("Mã phim");

        jLabel3.setText("Mã phòng");

        jLabel4.setText("Ngày chiếu");

        jLabel5.setText("Giờ chiếu");

        btlThem.setText("Thêm");
        btlThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlThemActionPerformed(evt);
            }
        });

        btlSua.setText("Sửa");
        btlSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlSuaActionPerformed(evt);
            }
        });

        btlXoa.setText("Xóa");
        btlXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlXoaActionPerformed(evt);
            }
        });

        btlThoat.setText("Thoát");
        btlThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlThoatActionPerformed(evt);
            }
        });

        btlTimKiem.setText("Tìm kiếm");
        btlTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlTimKiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(txtMaLichChieu, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtNgayChieu, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btlXoa))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtMaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btlSua))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtMaPhim, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btlThem)))
                        .addGap(105, 105, 105))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtGioChieu, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btlTimKiem)
                        .addGap(98, 98, 98))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btlThoat)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(txtMaLichChieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaPhim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btlThem)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btlSua)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtNgayChieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtGioChieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(btlThoat)
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btlXoa)
                        .addGap(18, 18, 18)
                        .addComponent(btlTimKiem)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowDuLieu() {
    try {
        tableMain.removeAll();
        String[] arr = {"Mã lịch chiếu", "Mã phim", "Mã phòng", "Ngày chiếu", "Giờ chiếu"};
        DefaultTableModel model = new DefaultTableModel(arr, 0);

        Connection connection = Connect.getConnection();
        if (connection == null) {
            JOptionPane.showMessageDialog(this, "Kết nối cơ sở dữ liệu thất bại!");
            return;
        }

        String query = "SELECT * FROM LichChieu"; 
        PreparedStatement ps = connection.prepareStatement(query);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            Vector vector = new Vector();
            vector.add(rs.getInt("MaLichChieu"));

            vector.add(rs.getInt("MaPhim"));
            vector.add(rs.getInt("MaPhong"));
            vector.add(rs.getDate("NgayChieu"));
            vector.add(rs.getTime("GioChieu")); 
            model.addRow(vector);
        }
        Connect.closeConnection(connection);
        tableMain.setModel(model);
    } catch (SQLException ex) {
        Logger.getLogger(LichChieu.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        ShowDuLieu();
    }//GEN-LAST:event_formComponentShown

    private void btlThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlThemActionPerformed
        // TODO add your handling code here:
            // Kiểm tra dữ liệu đầu vào
    if (txtMaLichChieu.getText().isEmpty() || txtMaPhim.getText().isEmpty() || 
        txtMaPhong.getText().isEmpty() || txtNgayChieu.getText().isEmpty() || 
        txtGioChieu.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin.");
        return;
    }

    try {
        // Chuyển đổi dữ liệu nếu cần (ví dụ: từ chuỗi sang số, ngày tháng)
        int maLichChieu = Integer.parseInt(txtMaLichChieu.getText());
        int maPhim = Integer.parseInt(txtMaPhim.getText());
        int maPhong = Integer.parseInt(txtMaPhong.getText());
        // Chuyển đổi txtNgayChieu và txtGioChieu sang kiểu dữ liệu Date và Time tương ứng nếu cần

        // Thêm lịch chiếu mới vào cơ sở dữ liệu
        try (Connection connection = Connect.getConnection()) {
            // Kiểm tra xem Mã lịch chiếu đã tồn tại hay chưa
            String checkQuery = "SELECT COUNT(*) FROM LichChieu WHERE MaLichChieu = ?";
            PreparedStatement checkPs = connection.prepareStatement(checkQuery);
            checkPs.setInt(1, maLichChieu);
            ResultSet checkRs = checkPs.executeQuery();
            checkRs.next();
            int count = checkRs.getInt(1);

            if (count > 0) {
                JOptionPane.showMessageDialog(this, "Mã lịch chiếu đã tồn tại!");
                txtMaLichChieu.requestFocus();
                return;
            }
                // Kiểm tra xem MaPhim đã tồn tại trong bảng Phim hay chưa
    String checkPhimQuery = "SELECT COUNT(*) FROM Phim WHERE MaPhim = ?";
    PreparedStatement checkPhimPs = connection.prepareStatement(checkPhimQuery);
    checkPhimPs.setInt(1, maPhim); 
    ResultSet checkPhimRs = checkPhimPs.executeQuery();
    checkPhimRs.next();
    int phimCount = checkPhimRs.getInt(1);

    if (phimCount == 0) { 
        JOptionPane.showMessageDialog(this, "Mã phim không tồn tại. Vui lòng thêm phim trước!");
        return; 
    }
                // Kiểm tra xem MaPhong đã tồn tại trong bảng PhongChieu hay chưa
    String checkPhongQuery = "SELECT COUNT(*) FROM PhongChieu WHERE MaPhong = ?";
    PreparedStatement checkPhongPs = connection.prepareStatement(checkPhongQuery);
    checkPhongPs.setInt(1, maPhong); 
    ResultSet checkPhongRs = checkPhongPs.executeQuery();
    checkPhongRs.next();
    int phongCount = checkPhongRs.getInt(1);

    if (phimCount == 0) { 
        JOptionPane.showMessageDialog(this, "Mã phòng không tồn tại. Vui lòng thêm phòng trước!");
        return; 
    }
            String insertQuery = "INSERT INTO LichChieu (MaLichChieu, MaPhim, MaPhong, NgayChieu, GioChieu) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement insertPs = connection.prepareStatement(insertQuery);
            insertPs.setInt(1, maLichChieu);
            insertPs.setInt(2, maPhim);
            insertPs.setInt(3, maPhong);
            insertPs.setString(4, txtNgayChieu.getText()); // Giả sử txtNgayChieu đã đúng định dạng DATE
            insertPs.setString(5, txtGioChieu.getText());  // Giả sử txtGioChieu đã đúng định dạng TIME

            insertPs.executeUpdate();
            Connect.closeConnection(connection);
            JOptionPane.showMessageDialog(this, "Thêm thành công!");
            ShowDuLieu(); // Cập nhật lại bảng sau khi thêm

            // Xóa dữ liệu đã nhập trong JTextField sau khi thêm thành công
            txtMaLichChieu.setText("");
            txtMaPhim.setText("");
            txtMaPhong.setText("");
            txtNgayChieu.setText("");
            txtGioChieu.setText("");

        } catch (SQLException ex) {
            Logger.getLogger(LichChieu.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Thêm thất bại! Lỗi: " + ex.getMessage()); 
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi: Mã lịch chiếu, Mã phim, Mã phòng phải là số.");
    } 
    }//GEN-LAST:event_btlThemActionPerformed

    private void btlSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlSuaActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableMain.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Vui lòng chọn một lịch chiếu để sửa.");
        return;
    }

    // Lấy mã lịch chiếu từ hàng được chọn
    int maLichChieu = Integer.parseInt(tableMain.getModel().getValueAt(selectedRow, 0).toString());

    // Lấy dữ liệu mới từ các JTextField
    try {
        int maPhimMoi = Integer.parseInt(txtMaPhim.getText());
        int maPhongMoi = Integer.parseInt(txtMaPhong.getText());
        // Chuyển đổi txtNgayChieu và txtGioChieu sang kiểu dữ liệu Date và Time tương ứng nếu cần

        try (Connection connection = Connect.getConnection()) {
            String query = "UPDATE LichChieu SET MaPhim = ?, MaPhong = ?, NgayChieu = ?, GioChieu = ? WHERE MaLichChieu = ?";
            PreparedStatement ps = connection.prepareStatement(query);
            ps.setInt(1, maPhimMoi);
            ps.setInt(2, maPhongMoi);
            ps.setString(3, txtNgayChieu.getText()); 
            ps.setString(4, txtGioChieu.getText());
            ps.setInt(5, maLichChieu);
            ps.executeUpdate();
            Connect.closeConnection(connection);

            // Cập nhật dữ liệu trên JTable
            tableMain.setValueAt(maPhimMoi, selectedRow, 1);
            tableMain.setValueAt(maPhongMoi, selectedRow, 2);
            tableMain.setValueAt(txtNgayChieu.getText(), selectedRow, 3); 
            tableMain.setValueAt(txtGioChieu.getText(), selectedRow, 4); 

            JOptionPane.showMessageDialog(this, "Sửa thành công!");

        } catch (SQLException ex) {
            Logger.getLogger(LichChieu.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Sửa thất bại!");
        }

    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi: Mã phim và Mã phòng phải là số.");
    }

    // Xóa dữ liệu đã nhập trong JTextField
    txtMaLichChieu.setText("");
    txtMaPhim.setText("");
    txtMaPhong.setText("");
    txtNgayChieu.setText("");
    txtGioChieu.setText("");
    }//GEN-LAST:event_btlSuaActionPerformed

    private void btlXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlXoaActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa?");
    if (result == JOptionPane.YES_OPTION) {

        int position = tableMain.getSelectedRow();
        if (position >= 0) {
            int maLichChieu = Integer.parseInt(tableMain.getModel().getValueAt(position, 0).toString());
            try (Connection connection = Connect.getConnection()) {
                String query = "DELETE FROM LichChieu WHERE MaLichChieu = ?";
                PreparedStatement ps = connection.prepareStatement(query);
                ps.setInt(1, maLichChieu);
                ps.executeUpdate();
                ShowDuLieu();
                Connect.closeConnection(connection);
                JOptionPane.showMessageDialog(null, "Xóa thành công!");
            } catch (SQLException ex) {
                ex.printStackTrace();

                JOptionPane.showMessageDialog(null, "Lỗi khi xóa: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn một hàng để xóa.");
        }
    }
    }//GEN-LAST:event_btlXoaActionPerformed

    private void btlThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlThoatActionPerformed
        // TODO add your handling code here:
                                this.dispose();
                // Mở form chính (giả sử bạn có một lớp MainForm)
                Main mainForm = new Main();
                mainForm.setVisible(true);
    }//GEN-LAST:event_btlThoatActionPerformed

    private void tableMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMainMouseClicked
        // TODO add your handling code here:
           int selectedRow = tableMain.getSelectedRow();

    if (selectedRow >= 0) {
        DefaultTableModel model = (DefaultTableModel) tableMain.getModel();

        // Lấy dữ liệu từ các cột tương ứng và hiển thị lên các trường nhập liệu
        txtMaLichChieu.setText(model.getValueAt(selectedRow, 0).toString());
        txtMaPhim.setText(model.getValueAt(selectedRow, 1).toString());
        txtMaPhong.setText(model.getValueAt(selectedRow, 2).toString());
        txtNgayChieu.setText(model.getValueAt(selectedRow, 3).toString());
        txtGioChieu.setText(model.getValueAt(selectedRow, 4).toString());

        // Nếu có các trường nhập liệu khác, bạn có thể thêm tương tự ở đây
    }
    }//GEN-LAST:event_tableMainMouseClicked

    private void btlTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlTimKiemActionPerformed
          // Lấy giá trị từ các trường văn bản
    String maLichChieu = txtMaLichChieu.getText().trim();
    String maPhim = txtMaPhim.getText().trim();
    String maPhong = txtMaPhong.getText().trim();
    String ngayChieu = txtNgayChieu.getText().trim();
    String gioChieu = txtGioChieu.getText().trim();
    
    // Tạo kết nối tới cơ sở dữ liệu
    try (Connection connection = Connect.getConnection()) { // Sử dụng phương thức kết nối của bạn
        // Tạo câu lệnh SQL
        String sql = "SELECT * FROM LichChieu WHERE "
                   + "MaLichChieu LIKE ? AND "
                   + "MaPhim LIKE ? AND "
                   + "MaPhong LIKE ? AND "
                   + "NgayChieu LIKE ? AND "
                   + "GioChieu LIKE ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            // Cài đặt tham số cho câu lệnh
            stmt.setString(1, maLichChieu.isEmpty() ? "%" : maLichChieu);
            stmt.setString(2, maPhim.isEmpty() ? "%" : maPhim);
            stmt.setString(3, maPhong.isEmpty() ? "%" : maPhong);
            stmt.setString(4, ngayChieu.isEmpty() ? "%" : ngayChieu);
            stmt.setString(5, gioChieu.isEmpty() ? "%" : gioChieu);
            
            // Thực thi câu lệnh và nhận kết quả
            try (ResultSet rs = stmt.executeQuery()) {
                // Tạo mô hình dữ liệu cho bảng
                DefaultTableModel model = new DefaultTableModel(new String[]{"MaLichChieu", "MaPhim", "MaPhong", "NgayChieu", "GioChieu"}, 0);
                
                // Đọc dữ liệu từ ResultSet và thêm vào mô hình
                while (rs.next()) {
                    String mlc = rs.getString("MaLichChieu");
                    String mp = rs.getString("MaPhim");
                    String mpb = rs.getString("MaPhong");
                    String nc = rs.getString("NgayChieu");
                    String gc = rs.getString("GioChieu");
                    model.addRow(new Object[]{mlc, mp, mpb, nc, gc});
                }
                
                // Cập nhật bảng với dữ liệu mới
                tableMain.setModel(model);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace(); // Xử lý lỗi
        JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btlTimKiemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LichChieu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LichChieu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LichChieu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LichChieu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LichChieu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btlSua;
    private javax.swing.JButton btlThem;
    private javax.swing.JButton btlThoat;
    private javax.swing.JButton btlTimKiem;
    private javax.swing.JButton btlXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMain;
    private javax.swing.JTextField txtGioChieu;
    private javax.swing.JTextField txtMaLichChieu;
    private javax.swing.JTextField txtMaPhim;
    private javax.swing.JTextField txtMaPhong;
    private javax.swing.JTextField txtNgayChieu;
    // End of variables declaration//GEN-END:variables
}
